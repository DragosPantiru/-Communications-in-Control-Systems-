C51 COMPILER V8.02   MS                                                                    03/05/2023 12:07:29 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE MS
OBJECT MODULE PLACED IN .\Objects\MS.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE MS.c LARGE BROWSE INCDIR(.\BIG8051\Include) DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\MS.lst) TABS(3) OBJECT(.\Objects\MS.obj)

line level    source

   1          #include <c8051F040.h>  // declaratii SFR
   2          #include <wdt.h>
   3          #include <osc.h>
   4          #include <port.h>
   5          #include <uart1.h>
   6          #include <lcd.h>
   7          #include <keyb.h>
   8          #include <Protocol.h>
   9          #include <UserIO.h>
  10          
  11          nod retea[NR_NODURI];               // reteaua Master-Slave, cu 5 noduri
  12          
  13          unsigned char STARE_NOD = 0;     // starea initiala a nodului curent
  14          unsigned char TIP_NOD   =0;      // tip nod initial: Slave sau No JET
  15          unsigned char STARE_IO  = 0;     // stare interfata IO - asteptare comenzi
  16          unsigned char ADR_MASTER;           // adresa nod master - numai MS
  17          extern unsigned char AFISARE;
  18          
  19          //********************************************************************************************************
             -***
  20          void TxMesaj(unsigned char i);   // transmisie mesaj destinat nodului i
  21          unsigned char RxMesaj(unsigned char i);      // primire mesaj de la nodul i
  22          
  23          //********************************************************************************************************
             -***
  24          void main (void) {
  25   1         unsigned char i, found; // variabile locale
  26   1         
  27   1         WDT_Disable();                                  // dezactiveaza WDT
  28   1         SYSCLK_Init();                               // initializeaza si selecteaza oscilatorul ales in osc.h
  29   1         UART1_Init(NINE_BIT, BAUDRATE_COM);    // initilizare UART1  - conectata la RS232-B (P1.0 si P1.1)
  30   1      
  31   1         PORT_Init ();                                      // conecteaza perifericele la pini (UART0, UART1) si stabileste tipul pinilor
  32   1      
  33   1         LCD_Init();                                        // 2 linii, display ON, cursor OFF, pozitia initiala (0,0)
  34   1         KEYB_Init();
  35   1         UART0_Init(EIGHT_BIT, BAUDRATE_IO);    // initializare UART0  - conectata la USB-UART (P0.0 si P0.1)
  36   1      
  37   1         Timer0_Init();                         // initializare Timer 0
  38   1      
  39   1         EA = 1;                                // valideaza intreruperile
  40   1         SFRPAGE = LEGACY_PAGE;                 // selecteaza pagina 0 SFR
  41   1         
  42   1         for(i = 0; i < NR_NODURI; i++){     // initializare structuri de date
  43   2            retea[i].full = 0;                  // initializeaza buffer gol pentru toate nodurile
  44   2            retea[i].bufasc[0] = ':';           // pune primul caracter in buffer-ele ASCII ":"
  45   2         }
  46   1      
  47   1         Afisare_meniu();                       // Afiseaza meniul de comenzi
  48   1         
  49   1         while(1){                                    // bucla infinita
  50   2                                                      
  51   2            switch(STARE_NOD){
  52   3               case 0:                                // nodul este slave, asteapta mesaj de la master   
C51 COMPILER V8.02   MS                                                                    03/05/2023 12:07:29 PAGE 2   

  53   3                  switch(RxMesaj(ADR_NOD)){           // asteapta un mesaj de la master
  54   4                     case TMO:                        // anunta ca nodul curent devine master
  55   4                                                      // nodul curent devine master
  56   4                                                      // trece in starea 2
  57   4                                                      // primul slave va fi cel care urmeaza dupa noul master
  58   4                                 break;
  59   4      
  60   4                     case ROK:                        break;   // a primit un mesaj de la master, il afiseaza si trece in starea 1
  61   4                     case CAN:                        break;   // afiseaza eroare Mesaj incomplet
  62   4                     case TIP:                        break;   // afiseaza eroare Tip mesaj necunoscut
  63   4                     case ESC:                        break;   // afiseaza Eroare SC
  64   4                     default:                         break;   // afiseaza cod eroare necunoscut
  65   4                  }
  66   3                  break;
  67   3      
  68   3               case 1:                                // nodul este slave, transmite mesaj catre master
  69   3                                       
  70   3                                                      // cauta sa gaseasca un mesaj util de transmis
  71   3                                          
  72   3                                                      
  73   3                                                      
  74   3                                                   
  75   3                                                
  76   3                                                      // daca gaseste un nod i
  77   3                                                      // pune adresa HW dest ADR_MASTER
  78   3                                                      // transmite mesajul catre nodul i
  79   3                                                      
  80   3                                                      // daca nu gaseste, construieste un mesaj in bufferul ADR_MASTER
  81   3                                                         // adresa HW dest este ADR_MASTER
  82   3                                                         // adresa HW src este ADR_NOD
  83   3                                                         // tip mesaj = POLL_MES
  84   3                                                         // transmite mesajul din bufferul ADR_MASTER
  85   3                                                   
  86   3                                                      // trece in starea 0, sa astepte un nou mesaj de la master
  87   3                  break;
  88   3         
  89   3               case 2:                                // tratare stare 2 si comutare stare
  90   3                                                   
  91   3                                                         // selecteaza urmatorul slave (incrementeaza i)
  92   3                                                         
  93   3                                                
  94   3                                                
  95   3         
  96   3                                                         // adresa HW dest este i
  97   3                                                         // daca in bufferul i se afla un mesaj util, il transmite
  98   3                                                         // altfel, construieste un mesaj de interogare in bufferul i
  99   3                                                         // adresa HW src este ADR_NOD
 100   3                                                         // tip mesaj = POLL_MES
 101   3                                                         // transmite mesajul din bufferul i
 102   3                                                   
 103   3                                                      // trece in starea 3, sa astepte raspunsul de la slave-ul i
 104   3                  break;
 105   3      
 106   3               case 3:                                // nodul este slave, asteapta mesaj de la master   
 107   3                  switch(RxMesaj(i)){                 // asteapta un raspuns de la slave i
 108   4                     case TMO:                                       // afiseaza eroare Timeout nod i
 109   4                              
 110   4                                 break;
 111   4                     case ROK:                                       break;   // a primit un mesaj, il afiseaza
 112   4                     case ERI:                                       break;   // afiseaza Eroare incadrare
 113   4                     case ERA:                                       break;   // afiseaza Eroare adresa
 114   4                     case TIP:                                       break;   // afiseaza Tip mesaj necunoscut
C51 COMPILER V8.02   MS                                                                    03/05/2023 12:07:29 PAGE 3   

 115   4                     case OVR:                                       break;   // afiseaza Eroare suprapunere
 116   4                     case ESC:                                       break;   // afiseaza Eroare SC
 117   4                     default:                                        break;   // afiseaza Eroare necunoscuta
 118   4                  }
 119   3                                                      // revine in starea 2 (a primit sau nu un raspuns de la slave, trece la urmatorul slave)
 120   3                  break;
 121   3            }
 122   2            UserIO();                     // apel functie interfata
 123   2         }
 124   1      }
*** WARNING C280 IN LINE 25 OF MS.C: 'found': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    141    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    279       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
